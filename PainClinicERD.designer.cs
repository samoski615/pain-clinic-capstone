#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace PainClinic
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="PainClinic")]
	public partial class PainClinicERDDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertAddress(Address instance);
    partial void UpdateAddress(Address instance);
    partial void DeleteAddress(Address instance);
    partial void InsertClinicDirectory(ClinicDirectory instance);
    partial void UpdateClinicDirectory(ClinicDirectory instance);
    partial void DeleteClinicDirectory(ClinicDirectory instance);
    partial void InsertClinic(Clinic instance);
    partial void UpdateClinic(Clinic instance);
    partial void DeleteClinic(Clinic instance);
    partial void InsertDailyLog(DailyLog instance);
    partial void UpdateDailyLog(DailyLog instance);
    partial void DeleteDailyLog(DailyLog instance);
    partial void InsertLogNote(LogNote instance);
    partial void UpdateLogNote(LogNote instance);
    partial void DeleteLogNote(LogNote instance);
    partial void InsertPatient(Patient instance);
    partial void UpdatePatient(Patient instance);
    partial void DeletePatient(Patient instance);
    partial void InsertProvider(Provider instance);
    partial void UpdateProvider(Provider instance);
    partial void DeleteProvider(Provider instance);
    #endregion
		
		public PainClinicERDDataContext() : 
				base(global::System.Configuration.ConfigurationManager.ConnectionStrings["PainClinicConnectionString"].ConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public PainClinicERDDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public PainClinicERDDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public PainClinicERDDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public PainClinicERDDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<Address> Addresses
		{
			get
			{
				return this.GetTable<Address>();
			}
		}
		
		public System.Data.Linq.Table<ClinicDirectory> ClinicDirectories
		{
			get
			{
				return this.GetTable<ClinicDirectory>();
			}
		}
		
		public System.Data.Linq.Table<Clinic> Clinics
		{
			get
			{
				return this.GetTable<Clinic>();
			}
		}
		
		public System.Data.Linq.Table<DailyLog> DailyLogs
		{
			get
			{
				return this.GetTable<DailyLog>();
			}
		}
		
		public System.Data.Linq.Table<LogNote> LogNotes
		{
			get
			{
				return this.GetTable<LogNote>();
			}
		}
		
		public System.Data.Linq.Table<Patient> Patients
		{
			get
			{
				return this.GetTable<Patient>();
			}
		}
		
		public System.Data.Linq.Table<Provider> Providers
		{
			get
			{
				return this.GetTable<Provider>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Addresses")]
	public partial class Address : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _AddressId;
		
		private string _StreetAddress;
		
		private string _City;
		
		private string _State;
		
		private string _Zipcode;
		
		private EntitySet<Clinic> _Clinics;
		
		private EntitySet<Patient> _Patients;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnAddressIdChanging(int value);
    partial void OnAddressIdChanged();
    partial void OnStreetAddressChanging(string value);
    partial void OnStreetAddressChanged();
    partial void OnCityChanging(string value);
    partial void OnCityChanged();
    partial void OnStateChanging(string value);
    partial void OnStateChanged();
    partial void OnZipcodeChanging(string value);
    partial void OnZipcodeChanged();
    #endregion
		
		public Address()
		{
			this._Clinics = new EntitySet<Clinic>(new Action<Clinic>(this.attach_Clinics), new Action<Clinic>(this.detach_Clinics));
			this._Patients = new EntitySet<Patient>(new Action<Patient>(this.attach_Patients), new Action<Patient>(this.detach_Patients));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AddressId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int AddressId
		{
			get
			{
				return this._AddressId;
			}
			set
			{
				if ((this._AddressId != value))
				{
					this.OnAddressIdChanging(value);
					this.SendPropertyChanging();
					this._AddressId = value;
					this.SendPropertyChanged("AddressId");
					this.OnAddressIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StreetAddress", DbType="VarChar(50)")]
		public string StreetAddress
		{
			get
			{
				return this._StreetAddress;
			}
			set
			{
				if ((this._StreetAddress != value))
				{
					this.OnStreetAddressChanging(value);
					this.SendPropertyChanging();
					this._StreetAddress = value;
					this.SendPropertyChanged("StreetAddress");
					this.OnStreetAddressChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_City", DbType="VarChar(50)")]
		public string City
		{
			get
			{
				return this._City;
			}
			set
			{
				if ((this._City != value))
				{
					this.OnCityChanging(value);
					this.SendPropertyChanging();
					this._City = value;
					this.SendPropertyChanged("City");
					this.OnCityChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_State", DbType="VarChar(10)")]
		public string State
		{
			get
			{
				return this._State;
			}
			set
			{
				if ((this._State != value))
				{
					this.OnStateChanging(value);
					this.SendPropertyChanging();
					this._State = value;
					this.SendPropertyChanged("State");
					this.OnStateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Zipcode", DbType="VarChar(5)")]
		public string Zipcode
		{
			get
			{
				return this._Zipcode;
			}
			set
			{
				if ((this._Zipcode != value))
				{
					this.OnZipcodeChanging(value);
					this.SendPropertyChanging();
					this._Zipcode = value;
					this.SendPropertyChanged("Zipcode");
					this.OnZipcodeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Address_Clinic", Storage="_Clinics", ThisKey="AddressId", OtherKey="AddressId")]
		public EntitySet<Clinic> Clinics
		{
			get
			{
				return this._Clinics;
			}
			set
			{
				this._Clinics.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Address_Patient", Storage="_Patients", ThisKey="AddressId", OtherKey="AddressId")]
		public EntitySet<Patient> Patients
		{
			get
			{
				return this._Patients;
			}
			set
			{
				this._Patients.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Clinics(Clinic entity)
		{
			this.SendPropertyChanging();
			entity.Address = this;
		}
		
		private void detach_Clinics(Clinic entity)
		{
			this.SendPropertyChanging();
			entity.Address = null;
		}
		
		private void attach_Patients(Patient entity)
		{
			this.SendPropertyChanging();
			entity.Address = this;
		}
		
		private void detach_Patients(Patient entity)
		{
			this.SendPropertyChanging();
			entity.Address = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ClinicDirectory")]
	public partial class ClinicDirectory : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ProviderId;
		
		private int _PatientId;
		
		private int _ClinicId;
		
		private EntityRef<Clinic> _Clinic;
		
		private EntityRef<Patient> _Patient;
		
		private EntityRef<Provider> _Provider;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnProviderIdChanging(int value);
    partial void OnProviderIdChanged();
    partial void OnPatientIdChanging(int value);
    partial void OnPatientIdChanged();
    partial void OnClinicIdChanging(int value);
    partial void OnClinicIdChanged();
    #endregion
		
		public ClinicDirectory()
		{
			this._Clinic = default(EntityRef<Clinic>);
			this._Patient = default(EntityRef<Patient>);
			this._Provider = default(EntityRef<Provider>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ProviderId", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int ProviderId
		{
			get
			{
				return this._ProviderId;
			}
			set
			{
				if ((this._ProviderId != value))
				{
					if (this._Provider.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnProviderIdChanging(value);
					this.SendPropertyChanging();
					this._ProviderId = value;
					this.SendPropertyChanged("ProviderId");
					this.OnProviderIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PatientId", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int PatientId
		{
			get
			{
				return this._PatientId;
			}
			set
			{
				if ((this._PatientId != value))
				{
					if (this._Patient.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPatientIdChanging(value);
					this.SendPropertyChanging();
					this._PatientId = value;
					this.SendPropertyChanged("PatientId");
					this.OnPatientIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ClinicId", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int ClinicId
		{
			get
			{
				return this._ClinicId;
			}
			set
			{
				if ((this._ClinicId != value))
				{
					if (this._Clinic.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnClinicIdChanging(value);
					this.SendPropertyChanging();
					this._ClinicId = value;
					this.SendPropertyChanged("ClinicId");
					this.OnClinicIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Clinic_ClinicDirectory", Storage="_Clinic", ThisKey="ClinicId", OtherKey="ClinicId", IsForeignKey=true)]
		public Clinic Clinic
		{
			get
			{
				return this._Clinic.Entity;
			}
			set
			{
				Clinic previousValue = this._Clinic.Entity;
				if (((previousValue != value) 
							|| (this._Clinic.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Clinic.Entity = null;
						previousValue.ClinicDirectories.Remove(this);
					}
					this._Clinic.Entity = value;
					if ((value != null))
					{
						value.ClinicDirectories.Add(this);
						this._ClinicId = value.ClinicId;
					}
					else
					{
						this._ClinicId = default(int);
					}
					this.SendPropertyChanged("Clinic");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Patient_ClinicDirectory", Storage="_Patient", ThisKey="PatientId", OtherKey="PatientId", IsForeignKey=true)]
		public Patient Patient
		{
			get
			{
				return this._Patient.Entity;
			}
			set
			{
				Patient previousValue = this._Patient.Entity;
				if (((previousValue != value) 
							|| (this._Patient.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Patient.Entity = null;
						previousValue.ClinicDirectories.Remove(this);
					}
					this._Patient.Entity = value;
					if ((value != null))
					{
						value.ClinicDirectories.Add(this);
						this._PatientId = value.PatientId;
					}
					else
					{
						this._PatientId = default(int);
					}
					this.SendPropertyChanged("Patient");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Provider_ClinicDirectory", Storage="_Provider", ThisKey="ProviderId", OtherKey="ProviderId", IsForeignKey=true)]
		public Provider Provider
		{
			get
			{
				return this._Provider.Entity;
			}
			set
			{
				Provider previousValue = this._Provider.Entity;
				if (((previousValue != value) 
							|| (this._Provider.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Provider.Entity = null;
						previousValue.ClinicDirectories.Remove(this);
					}
					this._Provider.Entity = value;
					if ((value != null))
					{
						value.ClinicDirectories.Add(this);
						this._ProviderId = value.ProviderId;
					}
					else
					{
						this._ProviderId = default(int);
					}
					this.SendPropertyChanged("Provider");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Clinics")]
	public partial class Clinic : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ClinicId;
		
		private string _ClinicName;
		
		private System.Nullable<int> _AddressId;
		
		private EntitySet<ClinicDirectory> _ClinicDirectories;
		
		private EntitySet<Provider> _Providers;
		
		private EntityRef<Address> _Address;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnClinicIdChanging(int value);
    partial void OnClinicIdChanged();
    partial void OnClinicNameChanging(string value);
    partial void OnClinicNameChanged();
    partial void OnAddressIdChanging(System.Nullable<int> value);
    partial void OnAddressIdChanged();
    #endregion
		
		public Clinic()
		{
			this._ClinicDirectories = new EntitySet<ClinicDirectory>(new Action<ClinicDirectory>(this.attach_ClinicDirectories), new Action<ClinicDirectory>(this.detach_ClinicDirectories));
			this._Providers = new EntitySet<Provider>(new Action<Provider>(this.attach_Providers), new Action<Provider>(this.detach_Providers));
			this._Address = default(EntityRef<Address>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ClinicId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ClinicId
		{
			get
			{
				return this._ClinicId;
			}
			set
			{
				if ((this._ClinicId != value))
				{
					this.OnClinicIdChanging(value);
					this.SendPropertyChanging();
					this._ClinicId = value;
					this.SendPropertyChanged("ClinicId");
					this.OnClinicIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ClinicName", DbType="VarChar(100)")]
		public string ClinicName
		{
			get
			{
				return this._ClinicName;
			}
			set
			{
				if ((this._ClinicName != value))
				{
					this.OnClinicNameChanging(value);
					this.SendPropertyChanging();
					this._ClinicName = value;
					this.SendPropertyChanged("ClinicName");
					this.OnClinicNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AddressId", DbType="Int")]
		public System.Nullable<int> AddressId
		{
			get
			{
				return this._AddressId;
			}
			set
			{
				if ((this._AddressId != value))
				{
					if (this._Address.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnAddressIdChanging(value);
					this.SendPropertyChanging();
					this._AddressId = value;
					this.SendPropertyChanged("AddressId");
					this.OnAddressIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Clinic_ClinicDirectory", Storage="_ClinicDirectories", ThisKey="ClinicId", OtherKey="ClinicId")]
		public EntitySet<ClinicDirectory> ClinicDirectories
		{
			get
			{
				return this._ClinicDirectories;
			}
			set
			{
				this._ClinicDirectories.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Clinic_Provider", Storage="_Providers", ThisKey="ClinicId", OtherKey="ClinicId")]
		public EntitySet<Provider> Providers
		{
			get
			{
				return this._Providers;
			}
			set
			{
				this._Providers.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Address_Clinic", Storage="_Address", ThisKey="AddressId", OtherKey="AddressId", IsForeignKey=true)]
		public Address Address
		{
			get
			{
				return this._Address.Entity;
			}
			set
			{
				Address previousValue = this._Address.Entity;
				if (((previousValue != value) 
							|| (this._Address.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Address.Entity = null;
						previousValue.Clinics.Remove(this);
					}
					this._Address.Entity = value;
					if ((value != null))
					{
						value.Clinics.Add(this);
						this._AddressId = value.AddressId;
					}
					else
					{
						this._AddressId = default(Nullable<int>);
					}
					this.SendPropertyChanged("Address");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_ClinicDirectories(ClinicDirectory entity)
		{
			this.SendPropertyChanging();
			entity.Clinic = this;
		}
		
		private void detach_ClinicDirectories(ClinicDirectory entity)
		{
			this.SendPropertyChanging();
			entity.Clinic = null;
		}
		
		private void attach_Providers(Provider entity)
		{
			this.SendPropertyChanging();
			entity.Clinic = this;
		}
		
		private void detach_Providers(Provider entity)
		{
			this.SendPropertyChanging();
			entity.Clinic = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.DailyLogs")]
	public partial class DailyLog : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _DailyLogId;
		
		private string _TodaysDate;
		
		private string _PainRating;
		
		private string _PainLocation;
		
		private string _AmountOfSleep;
		
		private string _ActivityLevel;
		
		private string _DailyActivities;
		
		private System.Nullable<int> _PatientId;
		
		private EntitySet<LogNote> _LogNotes;
		
		private EntityRef<Patient> _Patient;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnDailyLogIdChanging(int value);
    partial void OnDailyLogIdChanged();
    partial void OnTodaysDateChanging(string value);
    partial void OnTodaysDateChanged();
    partial void OnPainRatingChanging(string value);
    partial void OnPainRatingChanged();
    partial void OnPainLocationChanging(string value);
    partial void OnPainLocationChanged();
    partial void OnAmountOfSleepChanging(string value);
    partial void OnAmountOfSleepChanged();
    partial void OnActivityLevelChanging(string value);
    partial void OnActivityLevelChanged();
    partial void OnDailyActivitiesChanging(string value);
    partial void OnDailyActivitiesChanged();
    partial void OnPatientIdChanging(System.Nullable<int> value);
    partial void OnPatientIdChanged();
    #endregion
		
		public DailyLog()
		{
			this._LogNotes = new EntitySet<LogNote>(new Action<LogNote>(this.attach_LogNotes), new Action<LogNote>(this.detach_LogNotes));
			this._Patient = default(EntityRef<Patient>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DailyLogId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int DailyLogId
		{
			get
			{
				return this._DailyLogId;
			}
			set
			{
				if ((this._DailyLogId != value))
				{
					this.OnDailyLogIdChanging(value);
					this.SendPropertyChanging();
					this._DailyLogId = value;
					this.SendPropertyChanged("DailyLogId");
					this.OnDailyLogIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TodaysDate", DbType="VarChar(50)")]
		public string TodaysDate
		{
			get
			{
				return this._TodaysDate;
			}
			set
			{
				if ((this._TodaysDate != value))
				{
					this.OnTodaysDateChanging(value);
					this.SendPropertyChanging();
					this._TodaysDate = value;
					this.SendPropertyChanged("TodaysDate");
					this.OnTodaysDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PainRating", DbType="VarChar(10)")]
		public string PainRating
		{
			get
			{
				return this._PainRating;
			}
			set
			{
				if ((this._PainRating != value))
				{
					this.OnPainRatingChanging(value);
					this.SendPropertyChanging();
					this._PainRating = value;
					this.SendPropertyChanged("PainRating");
					this.OnPainRatingChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PainLocation", DbType="VarChar(50)")]
		public string PainLocation
		{
			get
			{
				return this._PainLocation;
			}
			set
			{
				if ((this._PainLocation != value))
				{
					this.OnPainLocationChanging(value);
					this.SendPropertyChanging();
					this._PainLocation = value;
					this.SendPropertyChanged("PainLocation");
					this.OnPainLocationChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AmountOfSleep", DbType="VarChar(50)")]
		public string AmountOfSleep
		{
			get
			{
				return this._AmountOfSleep;
			}
			set
			{
				if ((this._AmountOfSleep != value))
				{
					this.OnAmountOfSleepChanging(value);
					this.SendPropertyChanging();
					this._AmountOfSleep = value;
					this.SendPropertyChanged("AmountOfSleep");
					this.OnAmountOfSleepChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ActivityLevel", DbType="VarChar(50)")]
		public string ActivityLevel
		{
			get
			{
				return this._ActivityLevel;
			}
			set
			{
				if ((this._ActivityLevel != value))
				{
					this.OnActivityLevelChanging(value);
					this.SendPropertyChanging();
					this._ActivityLevel = value;
					this.SendPropertyChanged("ActivityLevel");
					this.OnActivityLevelChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DailyActivities", DbType="VarChar(250)")]
		public string DailyActivities
		{
			get
			{
				return this._DailyActivities;
			}
			set
			{
				if ((this._DailyActivities != value))
				{
					this.OnDailyActivitiesChanging(value);
					this.SendPropertyChanging();
					this._DailyActivities = value;
					this.SendPropertyChanged("DailyActivities");
					this.OnDailyActivitiesChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PatientId", DbType="Int")]
		public System.Nullable<int> PatientId
		{
			get
			{
				return this._PatientId;
			}
			set
			{
				if ((this._PatientId != value))
				{
					if (this._Patient.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPatientIdChanging(value);
					this.SendPropertyChanging();
					this._PatientId = value;
					this.SendPropertyChanged("PatientId");
					this.OnPatientIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="DailyLog_LogNote", Storage="_LogNotes", ThisKey="DailyLogId", OtherKey="DailyLogId")]
		public EntitySet<LogNote> LogNotes
		{
			get
			{
				return this._LogNotes;
			}
			set
			{
				this._LogNotes.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Patient_DailyLog", Storage="_Patient", ThisKey="PatientId", OtherKey="PatientId", IsForeignKey=true)]
		public Patient Patient
		{
			get
			{
				return this._Patient.Entity;
			}
			set
			{
				Patient previousValue = this._Patient.Entity;
				if (((previousValue != value) 
							|| (this._Patient.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Patient.Entity = null;
						previousValue.DailyLogs.Remove(this);
					}
					this._Patient.Entity = value;
					if ((value != null))
					{
						value.DailyLogs.Add(this);
						this._PatientId = value.PatientId;
					}
					else
					{
						this._PatientId = default(Nullable<int>);
					}
					this.SendPropertyChanged("Patient");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_LogNotes(LogNote entity)
		{
			this.SendPropertyChanging();
			entity.DailyLog = this;
		}
		
		private void detach_LogNotes(LogNote entity)
		{
			this.SendPropertyChanging();
			entity.DailyLog = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.LogNotes")]
	public partial class LogNote : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _PatientId;
		
		private int _DailyLogId;
		
		private EntityRef<DailyLog> _DailyLog;
		
		private EntityRef<Patient> _Patient;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnPatientIdChanging(int value);
    partial void OnPatientIdChanged();
    partial void OnDailyLogIdChanging(int value);
    partial void OnDailyLogIdChanged();
    #endregion
		
		public LogNote()
		{
			this._DailyLog = default(EntityRef<DailyLog>);
			this._Patient = default(EntityRef<Patient>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PatientId", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int PatientId
		{
			get
			{
				return this._PatientId;
			}
			set
			{
				if ((this._PatientId != value))
				{
					if (this._Patient.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPatientIdChanging(value);
					this.SendPropertyChanging();
					this._PatientId = value;
					this.SendPropertyChanged("PatientId");
					this.OnPatientIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DailyLogId", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int DailyLogId
		{
			get
			{
				return this._DailyLogId;
			}
			set
			{
				if ((this._DailyLogId != value))
				{
					if (this._DailyLog.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnDailyLogIdChanging(value);
					this.SendPropertyChanging();
					this._DailyLogId = value;
					this.SendPropertyChanged("DailyLogId");
					this.OnDailyLogIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="DailyLog_LogNote", Storage="_DailyLog", ThisKey="DailyLogId", OtherKey="DailyLogId", IsForeignKey=true)]
		public DailyLog DailyLog
		{
			get
			{
				return this._DailyLog.Entity;
			}
			set
			{
				DailyLog previousValue = this._DailyLog.Entity;
				if (((previousValue != value) 
							|| (this._DailyLog.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._DailyLog.Entity = null;
						previousValue.LogNotes.Remove(this);
					}
					this._DailyLog.Entity = value;
					if ((value != null))
					{
						value.LogNotes.Add(this);
						this._DailyLogId = value.DailyLogId;
					}
					else
					{
						this._DailyLogId = default(int);
					}
					this.SendPropertyChanged("DailyLog");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Patient_LogNote", Storage="_Patient", ThisKey="PatientId", OtherKey="PatientId", IsForeignKey=true)]
		public Patient Patient
		{
			get
			{
				return this._Patient.Entity;
			}
			set
			{
				Patient previousValue = this._Patient.Entity;
				if (((previousValue != value) 
							|| (this._Patient.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Patient.Entity = null;
						previousValue.LogNotes.Remove(this);
					}
					this._Patient.Entity = value;
					if ((value != null))
					{
						value.LogNotes.Add(this);
						this._PatientId = value.PatientId;
					}
					else
					{
						this._PatientId = default(int);
					}
					this.SendPropertyChanged("Patient");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Patients")]
	public partial class Patient : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _PatientId;
		
		private string _FirstName;
		
		private string _LastName;
		
		private System.Nullable<bool> _RxReceived;
		
		private System.Nullable<int> _AddressId;
		
		private EntitySet<ClinicDirectory> _ClinicDirectories;
		
		private EntitySet<DailyLog> _DailyLogs;
		
		private EntitySet<LogNote> _LogNotes;
		
		private EntityRef<Address> _Address;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnPatientIdChanging(int value);
    partial void OnPatientIdChanged();
    partial void OnFirstNameChanging(string value);
    partial void OnFirstNameChanged();
    partial void OnLastNameChanging(string value);
    partial void OnLastNameChanged();
    partial void OnRxReceivedChanging(System.Nullable<bool> value);
    partial void OnRxReceivedChanged();
    partial void OnAddressIdChanging(System.Nullable<int> value);
    partial void OnAddressIdChanged();
    #endregion
		
		public Patient()
		{
			this._ClinicDirectories = new EntitySet<ClinicDirectory>(new Action<ClinicDirectory>(this.attach_ClinicDirectories), new Action<ClinicDirectory>(this.detach_ClinicDirectories));
			this._DailyLogs = new EntitySet<DailyLog>(new Action<DailyLog>(this.attach_DailyLogs), new Action<DailyLog>(this.detach_DailyLogs));
			this._LogNotes = new EntitySet<LogNote>(new Action<LogNote>(this.attach_LogNotes), new Action<LogNote>(this.detach_LogNotes));
			this._Address = default(EntityRef<Address>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PatientId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int PatientId
		{
			get
			{
				return this._PatientId;
			}
			set
			{
				if ((this._PatientId != value))
				{
					this.OnPatientIdChanging(value);
					this.SendPropertyChanging();
					this._PatientId = value;
					this.SendPropertyChanged("PatientId");
					this.OnPatientIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FirstName", DbType="VarChar(50)")]
		public string FirstName
		{
			get
			{
				return this._FirstName;
			}
			set
			{
				if ((this._FirstName != value))
				{
					this.OnFirstNameChanging(value);
					this.SendPropertyChanging();
					this._FirstName = value;
					this.SendPropertyChanged("FirstName");
					this.OnFirstNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LastName", DbType="VarChar(50)")]
		public string LastName
		{
			get
			{
				return this._LastName;
			}
			set
			{
				if ((this._LastName != value))
				{
					this.OnLastNameChanging(value);
					this.SendPropertyChanging();
					this._LastName = value;
					this.SendPropertyChanged("LastName");
					this.OnLastNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RxReceived", DbType="Bit")]
		public System.Nullable<bool> RxReceived
		{
			get
			{
				return this._RxReceived;
			}
			set
			{
				if ((this._RxReceived != value))
				{
					this.OnRxReceivedChanging(value);
					this.SendPropertyChanging();
					this._RxReceived = value;
					this.SendPropertyChanged("RxReceived");
					this.OnRxReceivedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AddressId", DbType="Int")]
		public System.Nullable<int> AddressId
		{
			get
			{
				return this._AddressId;
			}
			set
			{
				if ((this._AddressId != value))
				{
					if (this._Address.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnAddressIdChanging(value);
					this.SendPropertyChanging();
					this._AddressId = value;
					this.SendPropertyChanged("AddressId");
					this.OnAddressIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Patient_ClinicDirectory", Storage="_ClinicDirectories", ThisKey="PatientId", OtherKey="PatientId")]
		public EntitySet<ClinicDirectory> ClinicDirectories
		{
			get
			{
				return this._ClinicDirectories;
			}
			set
			{
				this._ClinicDirectories.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Patient_DailyLog", Storage="_DailyLogs", ThisKey="PatientId", OtherKey="PatientId")]
		public EntitySet<DailyLog> DailyLogs
		{
			get
			{
				return this._DailyLogs;
			}
			set
			{
				this._DailyLogs.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Patient_LogNote", Storage="_LogNotes", ThisKey="PatientId", OtherKey="PatientId")]
		public EntitySet<LogNote> LogNotes
		{
			get
			{
				return this._LogNotes;
			}
			set
			{
				this._LogNotes.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Address_Patient", Storage="_Address", ThisKey="AddressId", OtherKey="AddressId", IsForeignKey=true)]
		public Address Address
		{
			get
			{
				return this._Address.Entity;
			}
			set
			{
				Address previousValue = this._Address.Entity;
				if (((previousValue != value) 
							|| (this._Address.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Address.Entity = null;
						previousValue.Patients.Remove(this);
					}
					this._Address.Entity = value;
					if ((value != null))
					{
						value.Patients.Add(this);
						this._AddressId = value.AddressId;
					}
					else
					{
						this._AddressId = default(Nullable<int>);
					}
					this.SendPropertyChanged("Address");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_ClinicDirectories(ClinicDirectory entity)
		{
			this.SendPropertyChanging();
			entity.Patient = this;
		}
		
		private void detach_ClinicDirectories(ClinicDirectory entity)
		{
			this.SendPropertyChanging();
			entity.Patient = null;
		}
		
		private void attach_DailyLogs(DailyLog entity)
		{
			this.SendPropertyChanging();
			entity.Patient = this;
		}
		
		private void detach_DailyLogs(DailyLog entity)
		{
			this.SendPropertyChanging();
			entity.Patient = null;
		}
		
		private void attach_LogNotes(LogNote entity)
		{
			this.SendPropertyChanging();
			entity.Patient = this;
		}
		
		private void detach_LogNotes(LogNote entity)
		{
			this.SendPropertyChanging();
			entity.Patient = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Providers")]
	public partial class Provider : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ProviderId;
		
		private string _Prefix;
		
		private string _FirstName;
		
		private string _LastName;
		
		private System.Nullable<bool> _RxReceived;
		
		private System.Nullable<int> _ClinicId;
		
		private EntitySet<ClinicDirectory> _ClinicDirectories;
		
		private EntityRef<Clinic> _Clinic;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnProviderIdChanging(int value);
    partial void OnProviderIdChanged();
    partial void OnPrefixChanging(string value);
    partial void OnPrefixChanged();
    partial void OnFirstNameChanging(string value);
    partial void OnFirstNameChanged();
    partial void OnLastNameChanging(string value);
    partial void OnLastNameChanged();
    partial void OnRxReceivedChanging(System.Nullable<bool> value);
    partial void OnRxReceivedChanged();
    partial void OnClinicIdChanging(System.Nullable<int> value);
    partial void OnClinicIdChanged();
    #endregion
		
		public Provider()
		{
			this._ClinicDirectories = new EntitySet<ClinicDirectory>(new Action<ClinicDirectory>(this.attach_ClinicDirectories), new Action<ClinicDirectory>(this.detach_ClinicDirectories));
			this._Clinic = default(EntityRef<Clinic>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ProviderId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ProviderId
		{
			get
			{
				return this._ProviderId;
			}
			set
			{
				if ((this._ProviderId != value))
				{
					this.OnProviderIdChanging(value);
					this.SendPropertyChanging();
					this._ProviderId = value;
					this.SendPropertyChanged("ProviderId");
					this.OnProviderIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Prefix", DbType="VarChar(5)")]
		public string Prefix
		{
			get
			{
				return this._Prefix;
			}
			set
			{
				if ((this._Prefix != value))
				{
					this.OnPrefixChanging(value);
					this.SendPropertyChanging();
					this._Prefix = value;
					this.SendPropertyChanged("Prefix");
					this.OnPrefixChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FirstName", DbType="VarChar(50)")]
		public string FirstName
		{
			get
			{
				return this._FirstName;
			}
			set
			{
				if ((this._FirstName != value))
				{
					this.OnFirstNameChanging(value);
					this.SendPropertyChanging();
					this._FirstName = value;
					this.SendPropertyChanged("FirstName");
					this.OnFirstNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LastName", DbType="VarChar(50)")]
		public string LastName
		{
			get
			{
				return this._LastName;
			}
			set
			{
				if ((this._LastName != value))
				{
					this.OnLastNameChanging(value);
					this.SendPropertyChanging();
					this._LastName = value;
					this.SendPropertyChanged("LastName");
					this.OnLastNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RxReceived", DbType="Bit")]
		public System.Nullable<bool> RxReceived
		{
			get
			{
				return this._RxReceived;
			}
			set
			{
				if ((this._RxReceived != value))
				{
					this.OnRxReceivedChanging(value);
					this.SendPropertyChanging();
					this._RxReceived = value;
					this.SendPropertyChanged("RxReceived");
					this.OnRxReceivedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ClinicId", DbType="Int")]
		public System.Nullable<int> ClinicId
		{
			get
			{
				return this._ClinicId;
			}
			set
			{
				if ((this._ClinicId != value))
				{
					if (this._Clinic.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnClinicIdChanging(value);
					this.SendPropertyChanging();
					this._ClinicId = value;
					this.SendPropertyChanged("ClinicId");
					this.OnClinicIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Provider_ClinicDirectory", Storage="_ClinicDirectories", ThisKey="ProviderId", OtherKey="ProviderId")]
		public EntitySet<ClinicDirectory> ClinicDirectories
		{
			get
			{
				return this._ClinicDirectories;
			}
			set
			{
				this._ClinicDirectories.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Clinic_Provider", Storage="_Clinic", ThisKey="ClinicId", OtherKey="ClinicId", IsForeignKey=true)]
		public Clinic Clinic
		{
			get
			{
				return this._Clinic.Entity;
			}
			set
			{
				Clinic previousValue = this._Clinic.Entity;
				if (((previousValue != value) 
							|| (this._Clinic.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Clinic.Entity = null;
						previousValue.Providers.Remove(this);
					}
					this._Clinic.Entity = value;
					if ((value != null))
					{
						value.Providers.Add(this);
						this._ClinicId = value.ClinicId;
					}
					else
					{
						this._ClinicId = default(Nullable<int>);
					}
					this.SendPropertyChanged("Clinic");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_ClinicDirectories(ClinicDirectory entity)
		{
			this.SendPropertyChanging();
			entity.Provider = this;
		}
		
		private void detach_ClinicDirectories(ClinicDirectory entity)
		{
			this.SendPropertyChanging();
			entity.Provider = null;
		}
	}
}
#pragma warning restore 1591
